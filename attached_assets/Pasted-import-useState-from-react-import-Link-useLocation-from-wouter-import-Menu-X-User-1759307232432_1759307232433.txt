import { useState } from "react";
import { Link, useLocation } from "wouter";
import { Menu, X, User, LogOut, BookOpen, Users, BarChart3, Settings, Lock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Logo from "@/components/ui/logo";
import { useSimpleAuth } from "@/hooks/useSimpleAuth";

export default function AuthenticatedNavigation() {
  const [location] = useLocation();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const { user } = useSimpleAuth();
  
  // User authenticated properly

  // Use actual user data or fallback
  const displayUser = user || {
    firstName: "User",
    lastName: "",
    email: "user@example.com",
    profileImageUrl: "",
    isAdmin: false
  };

  // Check user progression status
  const hasCompletedDeepDive = user?.hasCompletedDeepDive || false;
  const hasCompletedCourse = user?.hasCompletedCourse || false;

  const navigationItems = [
    { href: "/dashboard", label: "Dashboard", icon: BarChart3 },
    { 
      href: "/courses", 
      label: "Courses", 
      icon: BookOpen,
      locked: !hasCompletedDeepDive,
      lockMessage: "Complete a deep-dive assessment to unlock courses"
    },
    { 
      href: "/community", 
      label: "Community", 
      icon: Users,
      locked: !hasCompletedCourse,
      lockMessage: "Complete a course to unlock community access"
    },
  ];

  const toggleMobileMenu = () => {
    setMobileMenuOpen(!mobileMenuOpen);
  };

  return (
    <nav className="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <div className="flex items-center">
            <Link href="/dashboard">
              <img 
                src="/favicon.png" 
                alt="Logo" 
                className="h-10 w-10"
              />
            </Link>
          </div>
          
          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-8">
            {navigationItems.map((item) => {
              const Icon = item.icon;
              const isActive = location === item.href;
              const isLocked = item.locked;

              if (isLocked) {
                return (
                  <div
                    key={item.href}
                    className="flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium text-gray-400 dark:text-gray-600 cursor-not-allowed"
                    title={item.lockMessage}
                  >
                    <Lock className="h-4 w-4" />
                    <span>{item.label}</span>
                  </div>
                );
              }
              return (
                <Link key={item.href} href={item.href}>
                  <span
                    className={`flex items-center space-x-2 font-medium transition-colors ${
                      location === item.href
                        ? "text-primary"
                        : "text-gray-700 dark:text-gray-300 hover:text-primary"
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    <span>{item.label}</span>
                  </span>
                </Link>
              );
            })}
          </div>

          {/* User Menu - Always show - FORCED VISIBLE */}
          <div className="flex items-center space-x-4" style={{visibility: 'visible', display: 'flex'}}>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="relative h-10 w-10 rounded-full bg-blue-50 hover:bg-blue-100 border border-blue-200">
                  <img 
                    src="/favicon.png" 
                    alt="Profile" 
                    className="h-6 w-6"
                  />
                  <span className="absolute -top-1 -right-1 h-3 w-3 bg-green-500 border border-white rounded-full"></span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56" align="end" forceMount>
                <DropdownMenuLabel className="font-normal">
                  <div className="flex flex-col space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {displayUser.firstName && displayUser.lastName
                        ? `${displayUser.firstName} ${displayUser.lastName}`
                        : displayUser.email}
                    </p>
                    <p className="text-xs leading-none text-muted-foreground">
                      {displayUser.email}
                    </p>
                  </div>
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem asChild>
                  <Link href="/profile">
                    <User className="mr-2 h-4 w-4" />
                    <span>Profile</span>
                  </Link>
                </DropdownMenuItem>
                {displayUser.isAdmin && displayUser.email === 'sarfaraz02@gmail.com' && (
                  <DropdownMenuItem asChild>
                    <Link href="/admin">
                      <Settings className="mr-2 h-4 w-4" />
                      <span>Admin</span>
                    </Link>
                  </DropdownMenuItem>
                )}
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  onClick={async () => {
                    try {
                      await fetch('/api/auth/logout', {
                        method: 'POST',
                        credentials: 'include'
                      });
                      window.location.href = '/';
                    } catch (error) {
                      console.error('Logout failed:', error);
                      window.location.href = '/';
                    }
                  }}
                >
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden">
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleMobileMenu}
              className="text-gray-700 dark:text-gray-300"
            >
              {mobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </Button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="md:hidden bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
          <div className="px-2 pt-2 pb-3 space-y-1">
            {navigationItems.map((item) => {
              const Icon = item.icon;
              return (
                <Link key={item.href} href={item.href}>
                  <span
                    className={`flex items-center space-x-3 px-3 py-2 rounded-md text-base font-medium ${
                      location === item.href
                        ? "text-primary bg-primary/10"
                        : "text-gray-700 dark:text-gray-300 hover:text-primary hover:bg-gray-50 dark:hover:bg-gray-800"
                    }`}
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <Icon className="w-5 h-5" />
                    <span>{item.label}</span>
                  </span>
                </Link>
              );
            })}
            
            {/* Mobile User Menu */}
            <div className="border-t border-gray-200 dark:border-gray-700 pt-3 mt-3">
              <div className="px-3 py-2">
                <div className="flex items-center space-x-3">
                  <img 
                    src="/favicon.png" 
                    alt="Logo" 
                    className="h-8 w-8"
                  />
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-white">
                      {displayUser.firstName && displayUser.lastName
                        ? `${displayUser.firstName} ${displayUser.lastName}`
                        : displayUser.email}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">{displayUser.email}</p>
                  </div>
                </div>
              </div>
              
              <Link href="/profile">
                <span
                  className="flex items-center space-x-3 px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-primary"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <User className="w-5 h-5" />
                  <span>Profile</span>
                </span>
              </Link>
              
              <Link href="/admin">
                <span
                  className="flex items-center space-x-3 px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-primary"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Settings className="w-5 h-5" />
                  <span>Admin</span>
                </span>
              </Link>
              
              <button
                className="flex items-center space-x-3 px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-primary w-full text-left"
                onClick={() => {
                  window.location.href = "/api/logout";
                  setMobileMenuOpen(false);
                }}
              >
                <LogOut className="w-5 h-5" />
                <span>Log out</span>
              </button>
            </div>
          </div>
        </div>
      )}
    </nav>
  );
}